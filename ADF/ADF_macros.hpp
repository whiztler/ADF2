/*********************************************************************************
 _____ ____  _____ 
|  _  |    \|   __|
|     |  |  |   __|
|__|__|____/|__|

ARMA Mission Development Framework
ADF version: 2.00 / MARCH 2016

Script: Framework macro's
Author: Whiztler
Script version: 1.00

File: ADF_macros.hpp
**********************************************************************************
DO NOT edit this file. To set-up and configure your mission, edit the files in
the  'mission\1-config\'  folder.
*********************************************************************************/

// CHECKS
#define ADF__CHKPOS(VAR) VAR = [VAR] call ADF_fnc_checkPosition
#define ADF__CHKPOSA(VAR) if (typeName VAR != "ARRAY") then {ADF__CHKPOS(VAR)};
#define ADF__CHKPOSARR(VAR) if (typeName VAR != "ARRAY") then {VAR = [VAR] call ADF_fnc_checkPosition}
#define ADF__CHKMOD(ADDON) isClass (configFile >> "CfgPatches" >> ADDON)


// MISC
#define ADF__LOGBK \
		private _logTime = [dayTime] call BIS_fnc_timeToString; \
		private _logTimeText = "Log: " + _logTime;
#define ADF__SUPP(VAR,SCR) if !(isNil (str VAR)) then {[VAR] execVM format ["ADF\library\C\%1",SCR]}


// VARS
#define ADF__CCP(SCR) call compile preprocessFileLineNumbers SCR
#define ADF__GVAR(IDENT,VAR,DEFAULT) IDENT getVariable [#VAR, DEFAULT]
#define ADF__GMVAR(IDENT,VAR,DEFAULT) missionNamespace getVariable [#VAR, DEFAULT]
#define ADF__SVAR(IDENT,VAR,DEFAULT) IDENT setVariable [#VAR, DEFAULT]
#define ADF__SVARG(IDENT,VAR,DEFAULT) IDENT setVariable [#VAR, D, true]
#define ADF__SMVAR(VAR,DEFAULT) missionNamespace setVariable [#VAR, DEFAULT, false] 
#define ADF__SMVARG(VAR,DEFAULT) missionNamespace setVariable [#VAR,DEFAULT,true] 
#define ADF__CCVAR(VAR) call compile VAR
#define ADF__CCFVAR(IDEN,VAR) private IDENT = call compile format ["%1", VAR]
#define ADF__PI private #_i

// Params. pass without str
#define ADF__P1(V1) params [#V1]
#define ADF__P2(V1,V2) params [#V1, #V2]
#define ADF__P3(V1,V2,V3) params [#V1, #V2, #V3]
#define ADF__P4(V1,V2,V3,V4) params [#V1, #V2, #V3, #V4]
#define ADF__P5(V1,V2,V3,V4,V5) params [#V1, #V2, #V3, #V4, #V5]
#define ADF__P6(V1,V2,V3,V4,V5,V6) params [#V1, #V2, #V3, #V4, #V5, #V6]
#define ADF__P8(V1,V2,V3,V4,V5,V6,V7) params [#V1, #V2, #V3, #V4, #V5, #V6, #V7]
#define ADF__P7(V1,V2,V3,V4,V5,V6,V7,V8) params [#V1, #V2, #V3, #V4, #V5, #V6, #V7, #V8]


// MODULES
#define ADF__MODDEF(RADIUS) [_g, _p, RADIUS] call ADF_fnc_defendArea
#define ADF__MODFP(RADIUS,WP) [_g, _p, RADIUS, WP, #MOVE, #SAFE, #RED, #LIMITED, #FILE, 5] call ADF_fnc_footPatrol
#define ADF__MODFPSH(RADIUS,WP) [_g, _p, RADIUS, WP, #MOVE, #SAFE, #RED, #LIMITED, #FILE, 5, true] call ADF_fnc_footPatrol
#define ADF__MODVP(RADIUS,WP) [_c, _p, RADIUS, WP, #MOVE, #SAFE, #GREEN, #LIMITED, 25] call ADF_fnc_vehiclePatrol
#define ADF__MODAP(RADIUS,ALT,WP) [_c, _p, RADIUS, ALT, WP, #MOVE, #COMBAT, #RED, #LIMITED, #FILE, 100] call ADF_fnc_airPatrol
#define ADF__MODSP(RADIUS,WP) [_c, _p, RADIUS, WP, #MOVE, #SAFE, #RED, #NORMAL, #FILE, 5] call ADF_fnc_seaPatrol
#define ADF__MODSP(MOD,MSG) if (MOD) then {_m = _m + MSG};


// AGM Vanilla
#define ADF__GEAST2(VAR,POS) private VAR = [POS, east, (configFile >> #CfgGroups >> #east >> #OPF_F >> #Infantry >> #OIA_InfSentry)] call BIS_fnc_spawnGroup
#define ADF__GEAST4(VAR,POS) private VAR = [POS, east, (configFile >> #CfgGroups >> #east >> #OPF_F >> #Infantry >> #OIA_InfTeam)] call BIS_fnc_spawnGroup
#define ADF__GEAST8A(VAR,POS) private VAR = [POS, east, (configFile >> #CfgGroups >> #east >> #OPF_F >> #Infantry >> #OIA_InfAssault)] call BIS_fnc_spawnGroup
#define ADF__GEAST8S(VAR,POS) private VAR = [POS, east, (configFile >> #CfgGroups >> #east >> #OPF_F >> #Infantry >> #OIA_InfSquad)] call BIS_fnc_spawnGroup
#define ADF__GEAST8W(VAR,POS) private VAR = [POS, east, (configFile >> #CfgGroups >> #east >> #OPF_F >> #Infantry >> #OIA_InfSquad_Weapons)] call BIS_fnc_spawnGroup

#define ADF__GWEST2(VAR,POS) private VAR = [POS, west, (configFile >> #CfgGroups >> #west >> #BLU_F >> #Infantry >> #BUS_InfSentry)] call BIS_fnc_spawnGroup
#define ADF__GWEST4(VAR,POS) private VAR = [POS, west, (configFile >> #CfgGroups >> #west >> #BLU_F >> #Infantry >> #BUS_InfTeam)] call BIS_fnc_spawnGroup
#define ADF__GWEST8A(VAR,POS) private VAR = [POS, west, (configFile >> #CfgGroups >> #west >> #BLU_F >> #Infantry >> #BUS_InfAssault)] call BIS_fnc_spawnGroup
#define ADF__GWEST8S(VAR,POS) private VAR = [POS, west, (configFile >> #CfgGroups >> #west >> #BLU_F >> #Infantry >> #BUS_InfSquad)] call BIS_fnc_spawnGroup
#define ADF__GWEST8W(VAR,POS) private VAR = [POS, west, (configFile >> #CfgGroups >> #west >> #BLU_F >> #Infantry >> #BUS_InfSquad_Weapons)] call BIS_fnc_spawnGroup

#define ADF__GINDEP2(VAR,POS) private VAR = [POS, independent, (configFile >> #CfgGroups >> #Indep >> #IND_F >> #Infantry >> #HAF_InfSentry)] call BIS_fnc_spawnGroup
#define ADF__GINDEP4(VAR,POS) private VAR = [POS, independent, (configFile >> #CfgGroups >> #Indep >> #IND_F >> #Infantry >> #HAF_InfTeam)] call BIS_fnc_spawnGroup
#define ADF__GINDEP8S(VAR,POS) private VAR = [POS, independent, (configFile >> #CfgGroups >> #Indep >> #IND_F >> #Infantry >> #HAF_InfSquad)] call BIS_fnc_spawnGroup
#define ADF__GINDEP8W(VAR,POS) private VAR = [POS, independent, (configFile >> #CfgGroups >> #Indep >> #IND_F >> #Infantry >> #HAF_InfSquad_Weapons)] call BIS_fnc_spawnGroup


// DEBUG & REPORTING
#define ADF__LOG(MSG) [MSG,false] call ADF_fnc_log
#define ADF__LOGERR(MSG) [MSG, true] call ADF_fnc_log
#define ADF__DBGLOG(MSG) if (ADF_debug) then {[MSG,false] call ADF_fnc_log}
#define ADF__DBGLOGERR(MSG) if (ADF_debug) then {[MSG, true] call ADF_fnc_log}
#define ADF__DBGVAR(MSG) if (ADF_debug) then {diag_log MSG}
#define ADF__DBGVAR1(MSG,VAR) if (ADF_debug) then {diag_log format [MSG, VAR]}
#define ADF__DBGVAR2(MSG,VAR1,VAR2) if (ADF_debug) then {diag_log format [MSG, VAR1, VAR2]}
#define ADF__DBGVAR3(MSG,VAR1,VAR2,VAR3) if (ADF_debug) then {diag_log format [MSG, VAR1, VAR2, VAR3]}
#define ADF__DBGVAR4(MSG,VAR1,VAR2,VAR3,VAR3) if (ADF_debug) then {diag_log format [MSG, VAR1, VAR2, VAR3, VAR4]}
#define ADF__DBGVAR5(MSG,VAR1,VAR2,VAR3,VAR4,VAR5) if (ADF_debug) then {diag_log format [MSG, VAR1, VAR2, VAR3, VAR4, VAR5]}

#define ADF__ERPT(S) diag_log format ["ADF RPT: Init - executing: %1",S]

#define ADF__RPTLOG(MSG) diag_log format [MSG]
#define ADF__RPTVAR1(MSG,VAR) diag_log format [MSG, VAR]
#define ADF__RPTVAR2(MSG,VAR1,VAR2) diag_log format [MSG, VAR1, VAR2]
#define ADF__RPTVAR3(MSG,VAR1,VAR2,VAR3) diag_log format [MSG, VAR1, VAR2, VAR3]
#define ADF__RPTVAR4(MSG,VAR1,VAR2,VAR3,VAR3) diag_log format [MSG, VAR1, VAR2, VAR3, VAR4]
#define ADF__RPTVAR5(MSG,VAR1,VAR2,VAR3,VAR4,VAR5) diag_log format [MSG, VAR1, VAR2, VAR3, VAR4, VAR5]

#define ADF__diagInit private _dt = diag_tickTime
#define ADF__diagTime(FNC) if (ADF_debug) then {diag_log format ["ADF Debug: %1 - Diag time to execute function: %2", FNC, diag_tickTime - _dt]}